{"version":3,"sources":["Peopleinfo.js","List.js","SearchBox.js","Scroll.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Peopleinfo","name","birth_year","height","mass","className","PeopleinfoList","people","map","user","i","key","vehicles","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","children","ErrorBoundry","state","hasError","error","info","this","setstate","Component","App","onSearchChange","event","setState","searchfield","target","value","fetch","then","response","json","results","filteredperson","filter","person","toLowerCase","includes","toLocaleLowerCase","length","List","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAceA,G,MAXI,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC5C,OACI,yBAAKC,UAAU,uDACX,4BAAKJ,GACL,2BAAIC,GACJ,2BAAIC,GACJ,2BAAIC,MCeDE,EArBQ,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLT,KAAI,gBAAWM,EAAOG,GAAGT,MACzBC,WAAU,sBAAiBK,EAAOG,GAAGR,YACrCC,OAAM,kBAAaI,EAAOG,GAAGP,QAC7BC,KAAI,gBAAWG,EAAOG,GAAGN,MACzBQ,SAAQ,oBAAeL,EAAOG,GAAGE,iBCC9CC,EAdG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKT,UAAU,OACX,2BACIA,UAAU,gCACVU,KAAK,SACLC,YAAY,wBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUlB,OAAO,UACnCgB,EAAMG,WCiBJC,E,YAnBX,WAAYJ,GAAQ,IAAD,8BACf,4CAAMA,KACDK,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,wDAEJG,KAAKT,MAAMG,a,GAhBCQ,aCqDZC,E,YA/Cb,aAAe,IAAD,8BACZ,+CAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKb,MAAQ,CACXjB,OAAQ,GACR4B,YAAa,IAJH,E,iFAQO,IAAD,OAClBG,MAAM,gCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9B,GAAI,OAAI,EAAKyB,SAAS,CAAE3B,OAAQE,EAAKiC,e,+BAOpC,IAAD,EAC0Bd,KAAKJ,MAA7BjB,EADF,EACEA,OAAQ4B,EADV,EACUA,YACVQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACnC,OAAOA,EAAO5C,KAAK6C,cAAcC,SAASZ,EAAYa,wBAExD,OAAQzC,EAAO0C,OAWb,yBAAK5C,UAAU,OACb,yCACA,kBAAC,EAAD,CAAWS,aAAcc,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAACkB,EAAD,CAAM3C,OAAQoC,OAhBG,yBAAKtC,UAAU,gCACtC,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aACnB,yBAAKA,UAAU,YACX,yBAAKA,UAAU,wBACnB,yBAAKA,UAAU,kB,GA/BPyB,aCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.1bd2364e.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Peopleinfo = ({ name, birth_year, height, mass }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5 pa4\">\n            <h5>{name}</h5>\n            <p>{birth_year}</p>\n            <p>{height}</p>\n            <p>{mass}</p>\n        </div>  \n    );\n}\n\nexport default Peopleinfo;","import React from 'react';\nimport Peopleinfo from './Peopleinfo';\n\nconst PeopleinfoList = ({ people }) => {\n    return (\n        <div>\n            {\n                people.map((user, i) => {\n                    return (\n                        <Peopleinfo\n                            key={i} \n                            name={`Name: ${people[i].name}`}\n                            birth_year={`Birth Year: ${people[i].birth_year}`}\n                            height={`Height: ${people[i].height}`}\n                            mass={`Mess: ${people[i].mass}`}\n                            vehicles={`Vehicles: ${people[i].vehicles}`}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default PeopleinfoList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-light-blue'\n                type='search'\n                placeholder='search people by name'\n                onChange={searchChange}\n            />\n        </div>\n\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflow: 'scroll', height:'600px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setstate({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops, That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport './App.css';\nimport List from './List';\nimport SearchBox from './SearchBox.js';\nimport Scroll from './Scroll';\nimport ErrorBoundry from './ErrorBoundry';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      people: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://swapi.co/api/people/\")\n    .then(response => response.json())\n    .then(user => this.setState({ people: user.results }));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render(){\n    const { people, searchfield } = this.state;\n    const filteredperson = people.filter(person => {\n      return person.name.toLowerCase().includes(searchfield.toLocaleLowerCase());\n    })\n    return !people.length ? (<div className=\"preloader-wrapper big active\">\n      <div className=\"spinner-layer spinner-blue-only\">\n        <div className=\"circle-clipper left\">\n          <div className=\"circle\"></div>\n        </div><div className=\"gap-patch\">\n          <div className=\"circle\"></div>\n        </div><div className=\"circle-clipper right\">\n          <div className=\"circle\"></div>\n        </div>\n      </div>\n    </div>) : (\n      <div className=\"App\">\n        <h1>Star Wars</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <List people={filteredperson}></List>\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}